@using System.Collections
@using CarsLibrary.Models.Queries
@using CarsLibrary.UI.Models
@using Microsoft.Ajax.Utilities
@model CarsLibrary.UI.Models.RegisterViewModel
@{
    ViewBag.Title = "adduser";
}

<h2 style="text-shadow: 0 4px 0 lightgray">Add User</h2>
@using (Html.BeginForm("Register", "account", FormMethod.Post, new {@class = "form-horizontal", role = "form"}))
{
    @Html.AntiForgeryToken()
    <div style="padding: 10px;box-shadow: 0 0 5px black" class="col-md-8">
        <div class="row">
            <div class="col-md-6">
                <label>First Name</label>
                @Html.ValidationMessageFor(m => m.FirstName)
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
            </div>
            <div class="col-md-6">
                <label>Last Name</label>
                @Html.ValidationMessageFor(m => m.LastName)
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
            </div>
            <div class="col-md-6">
                <label>Email</label>
                @Html.ValidationMessageFor(m=>m.Email)
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            </div>
            <div class="col-md-6">
                <label>Role</label>
                @Html.ValidationMessageFor(m => m.SelectRole)
                @Html.DropDownListFor(m => m.SelectRole, (IEnumerable<SelectListItem>)ViewBag.Roles, "Select A Role", new { @class = "form-control" })
            </div>
            <div class="col-md-6">
                <label for="psw">Password</label>
                @Html.ValidationMessageFor(m => m.Password)
                @Html.PasswordFor(m => m.Password, new { @id= "psw", @class = "form-control",RegularExpressionAttribute=@"(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" })
                @*<input class="form-control" type="password" id="psw" name="psw" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required>*@
            </div>
            <div class="col-md-6">
                <label>Confirm Password</label>
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>
        <input style="margin-top:20px" type="submit" class="btn btn-primary" value="Save" />
        @*<button id="saveAddUser" style="box-shadow: 0 0 3px black; margin-top:20px" class="btn btn-group-lg btn-primary">Save</button>*@
        <div style="box-shadow: 0 0 5px black" class="col-md-12" id="message">
            <h3>Password must contain the following:</h3>
            <h5 id="letter" class="invalid">A lowercase letter</h5>
            <h5 id="capital" class="invalid">A <b>capital (uppercase)</b> letter</h5>
            <h5 id="number" class="invalid">A <b>number</b></h5>
            <h5 id="length" class="invalid">Minimum <b>8 characters</b></h5>
        </div>
    </div>
    
    @*@Html.DropDownListFor(m => m.SelectRole,new SelectList(Model.SelectRole),new{@class="form-control"});*@
}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    var myInput = document.getElementById("psw");
    var letter = document.getElementById("letter");
    var capital = document.getElementById("capital");
    var number = document.getElementById("number");
    var length = document.getElementById("length");

// When the user clicks on the password field, show the message box
    myInput.onfocus = function() {
        document.getElementById("message").style.display = "block";
    }

// When the user clicks outside of the password field, hide the message box
    myInput.onblur = function() {
        document.getElementById("message").style.display = "none";
    }

// When the user starts to type something inside the password field
    myInput.onkeyup = function() {
        // Validate lowercase letters
        var lowerCaseLetters = /[a-z]/g;
        if(myInput.value.match(lowerCaseLetters)) {
            letter.classList.remove("invalid");
            letter.classList.add("valid");
        } else {
            letter.classList.remove("valid");
            letter.classList.add("invalid");
        }

        // Validate capital letters
        var upperCaseLetters = /[A-Z]/g;
        if(myInput.value.match(upperCaseLetters)) {
            capital.classList.remove("invalid");
            capital.classList.add("valid");
        } else {
            capital.classList.remove("valid");
            capital.classList.add("invalid");
        }

        // Validate numbers
        var numbers = /[0-9]/g;
        if(myInput.value.match(numbers)) {
            number.classList.remove("invalid");
            number.classList.add("valid");
        } else {
            number.classList.remove("valid");
            number.classList.add("invalid");
        }

        // Validate length
        if(myInput.value.length >= 8) {
            length.classList.remove("invalid");
            length.classList.add("valid");
        } else {
            length.classList.remove("valid");
            length.classList.add("invalid");
        }

    }
</script>